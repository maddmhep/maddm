#            ====================================================
#            |                    MadDM v3.0                     |
#            ====================================================
#
#                #########
#             ###\\####//#####              Launchpad:  launchpad.net/maddm
#           ######\\##//########
#          ########\\//###########
#         #########//\\############
#        #########//##\\############                   arXiv:1308.4955
#       ########//#####\\###########                   arXiv:1505.04190
#       ######################### ## ___________________________________________
#       ####################### 0  #  _     _               _  _____   _     _
#       #############   0  ###    ## | \   / |   ___    ___|| | ___ \ | \   / |
#       ##############    #########  ||\\ //|| / __ |  / __ | ||   || ||\\ //||
#        ##########################  ||  V  || ||__||  ||__|| ||___|| ||  V  ||
#         ###################   ##   ||     || \_____\ \____| |_____/ ||     ||
#          ############       ###    ___________________________________________
#           ##########    ######
#             ################
#                 ########
#
###################################################################################
#
#   RELIC DENSITY
#
###################################################################################

#flag to use the canonical calculation or the coupled relic density calculation
  %(relic_canonical)s       = relic_canonical   
#flags for calculating an array of taacs values or calculate them on the spot
  %(calc_taacs_ann_array)s       = calc_taacs_ann_array 
  %(calc_taacs_dm2dm_array)s       = calc_taacs_dm2dm_array
  %(calc_taacs_scattering_array)s       = calc_taacs_scattering_array

# precision of the ODE integrator which solves for relic density.
  %(eps_ode)s       = eps_ode

# use an approximation for the decoupling temperature in the relic density calc?
# if xd_approx = .false. use "step back" parameters [x_start,x_end,dx_step] for the ODE integrator
# (see manual for more details). Slower, but more accurate.
  %(xd_approx)s       = xd_approx

#
#  Advanced parameters for relic density
#

# Controlling some printout of the calculation
  %(print_out)s      = print_out         # status update
  %(print_sigmas)s      = print_sigmas      # print out the values of the annihilation 
                                         #cross section at x_f (s = 4m^2/(1-2/x_f))
# if xd_approx = .false. use "step back" parameters for the ODE integrator
# (see manual for more details). Slower, but more accurate.
   %(x_start)s      = x_start
   %(x_end)s    = x_end
   %(dx_step)s       = dx_step



###################################################################################
#
# Direct(ional) Detection 
#
###################################################################################

# choose the target material (type "help material" for more target code)
   %(material)s         = material ! 1: Xenon, 2: Germanium, 3: Silicon, ...

# galactic halo DM constants (for direct detection & capture rate by sun/earth)
   %(vmp)s     = vMP  ! The most probable WIMP velocity v_0 (km/s)
   %(vescape)s     = vescape  ! The escape velocity of WIMPS in the Halo (km/s)
   %(rhodm)s       = rhoDM   ! The density of WIMPs in our local Universe (GeV/c^2/cm^-3)

# choose the size of the detector
   %(detector_size)s    = detector_size  ! For 1 ton = 1000 kg detector
   %(en_threshold)s       = En_threshold     ! in keVnr

# choose the energy resolution coefficient and range 
   %(lambd)s       = lambd ! lambda (sigma_E = lambda*sqrt(E))
   %(sig_theta)s       = sig_theta ! angular resolution
   %(en_min)s       = En_min          ! minimum recoil Energy
   %(en_max)s     = En_max          ! maximum recoil energy
   %(energy_bins)s       = Energy_bins     ! Number of Energy bins
   %(cos_min)s      = cos_min         ! Minimum cosine of recoil angle
   %(cos_max)s       = cos_max         ! Maximum cosine of recoil angle
   %(cos_theta_bins)s        = cos_theta_bins  ! Number of cosine angle bins

# running time of the detector
   %(day_min)s       = day_min         ! 1st day of observation.
   %(day_max)s     = day_max         ! 1 year later.
   %(day_bins)s        = day_bins        ! Number of time bins

# Turn on detector smearing or not (both energy and angle)
   %(smearing)s     = smearing

###################################################################################
#
# Nuclear Form Factors
#
###################################################################################
# Scalar FF
   %(spu)s    = SPu
   %(spd)s    = SPd
   %(sps)s    = SPs
   %(spg)s    = SPg              # 1.d0 - SPu - SPd - SPs
   %(snu)s     = SNu
   %(snd)s    = SNd
   %(sns)s    = SNs
   %(sng)s     = SNg              #1.d0 - SNu - SNd - SNs
# Vector FF
   %(vpu)s       = VPu
   %(vpd)s       = VPd
   %(vnu)s       = VNu
   %(vnd)s       = VNd
# Axial Vector FF
   %(avpu)s     = AVPu
   %(avpd)s    = AVPd
   %(avps)s    = AVPs
   %(avnu)s    = AVNu
   %(avnd)s     = AVNd
   %(avns)s    = AVNs
# Sigma(mu,nu) FF
   %(sigpu)s      = SigPu
   %(sigpd)s     = SigPd
   %(sigps)s    = SigPs
   %(signu)s     = SigNu
   %(signd)s      = SigNd
   %(signs)s    = SigNs

###################################################################################
#
# InDirect Detection 
#
###################################################################################

# Method of computation (affects speed and precision)
   %(sigmav_method)s    = sigmav_method ! inclusive, madevent, reshuffling
   %(indirect_flux_source_method)s   = indirect_flux_source_method ! pythia8, PPPC4DMID, PPPC4DMID_ew
   %(indirect_flux_earth_method)s    =  indirect_flux_earth_method ! dragon, PPPC4DMID_ep

# setting for DM velocity
   %(vave_indirect_cont)s     = vave_indirect_cont  # average velocity of DM for continuum searches (default: Fermi-LAT dSph searches)
   %(vave_indirect_line)s   = vave_indirect_line  # average velocity of DM for line searches (default: GC line search analysis) 
   
# PPPC4DMID_ep settings for dm halo profile, propagation method and halo function
   %(dm_profile)s       = dm_profile ! NFW, Moo, Iso, Ein 
   %(prop_method)s       = prop_method ! MIN, MED, MAX
   %(halo_funct)s       = halo_funct ! MF1, MF2, MF3

# --------------------
# Line analysis
# --------------------

# choice of the dark matter density profile
   %(profile)s   = profile ! nfwg, einasto, nfw, isothermal, burkert

# profile common parameters
   %(r_s)s      = r_s # kpc

# nfwg specific parameters
   %(gamma)s       = gamma

# einasto specific parameters
   %(alpha)s      = alpha

# profile normalisation parameters
   %(r_sun)s       = r_sun # kpc
   %(rho_sun)s       = rho_sun # GeV cm^-3

# specify a ROI for Fermi-LAT 2015
# set default to use the ROI for which your profile is optimized
   %(roi_fermi_2015)s   = roi_fermi_2015 ! default, R3, R16, R41, R90

# number of FWHM to take as the minimum energy separation between peaks to consider them well separated
   %(n_fwhm_separation)s       = n_fwhm_separation

# minimum ratio between peaks' heights to have one of them significantly higher than the other
   %(peak_height_factor)s      = peak_height_factor

# toggle line experiments on/off
   %(toggle_fermi_2015)s        = toggle_fermi_2015
   %(toggle_hess_2018)s        = toggle_hess_2018

### Template line experiment
# in the following you are able to specify the parameters for an experiment of your choice
# - toggle it on/off
   %(toggle_template_line_experiment)s            = toggle_template_line_experiment
# - name and arxiv (only for reference purpose)
   %(template_line_experiment_name)s  = template_line_experiment_name
   %(template_line_experiment_arxiv)s = template_line_experiment_arxiv
# - you can specify up to 1 ROI (in deg) and a profile associated to it (with the various parameters as seen above)
   %(template_line_experiment_roi)s            = template_line_experiment_roi
   %(template_line_experiment_profile)s        = template_line_experiment_profile
   %(template_line_experiment_r_s)s           = template_line_experiment_r_s
#  - NFW parameter gamma
   %(template_line_experiment_gamma)s            = template_line_experiment_gamma
#  - Einasto parameter alpha
   %(template_line_experiment_alpha)s           = template_line_experiment_alpha
# - specify the parameters of the mask (angles are in deg)
   %(template_line_experiment_mask_latitude)s            = template_line_experiment_mask_latitude    # angle 'lambda': mask P, if abs(latitude(P)) < lambda/2
   %(template_line_experiment_mask_longitude)s          = template_line_experiment_mask_longitude   # angle 'beta' : mask P, if abs(longitude(P)) > beta/2
   %(template_line_experiment_mask_inner_angle)s            = template_line_experiment_mask_inner_angle # angle 'alpha_1': mask P, if abs(arctan(P.y/P.x)) < alpha_1/2
# - energy resolution: this is a percent value to be multiplied by the energy of the peak
   %(template_line_experiment_energy_resolution)s           = template_line_experiment_energy_resolution
# - detection range in GeV
   %(template_line_experiment_detection_range_min)s            = template_line_experiment_detection_range_min
   %(template_line_experiment_detection_range_max)s      = template_line_experiment_detection_range_max
# - constraints file name: to be placed in $MADDM_PATH/ExpData/, must be 3 columns, lines starting with '#' will be considered as comments
#   DM mass (GeV), <sigmav> (cm^3 s^{-1}), flux (cm^{-2} s^{-1})
   %(template_line_experiment_constraints_file)s           = template_line_experiment_constraints_file

###################################################################################
#
# GLOBAL PARAMETER
#
###################################################################################

#flag to limit the Auto of the param_card to only consider two body decays.
 %(only_two_body_decays)s = only_two_body_decays

#
# integration precision parameters (relic and indirect --inclusive--)
#

#     For the calculation of taacs only (both relic and indirect),
#     Initial number of points in the grid to integrate over (of dm velocity)
   %(ngrid_init)s        = ngrid_init
#     Number of points to add for one width around each resonance peak
#     (the code will add points which exponentially increase in distance from the pole)
   %(nres_points)s        = nres_points
# precision of the romberg integration for Wij (irrelevant if simpson's rule used)
   %(eps_wij)s      = eps_wij
# minimum number of iterations in the romberg integration algorithm for both Wij (irrelevant if simpson's rule used)
   %(iter_wij)s         = iter_wij

###################################################################################
#
#  Additional (very advanced) parameter
#
###################################################################################
